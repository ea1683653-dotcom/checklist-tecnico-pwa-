flask
flask-login
flask-mail
fpdf
werkzeug
# Checklist Técnico PWA

Sistema completo para inspeções técnicas com geração de relatórios em PDF, login de usuários, histórico, envio por e-mail, geolocalização e suporte a PWA para uso como app Android.

## Funcionalidades
- Login de técnicos
- Checklist de quadros elétricos, bombas Grundfos, geradores, extintores e análise predial
- Upload de fotos
- Geração de PDF
- Histórico de relatórios
- Envio automático por e-mail
- Geolocalização
- Instalação como app (PWA)

## Como rodar
```bash
pip install -r requirements.txt
python app.py
from flask import Flask, render_template, request, redirect, url_for, send_file, session
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from flask_mail import Mail, Message
from werkzeug.utils import secure_filename
from report_generator import generate_pdf
import os
flask
flask-login
flask-mail
fpdf
werkzeug
requirements.txt
app = Flask(__name__)
app.secret_key = 'sua_chave_secreta'

# Configuração de login
login_manager = LoginManager()
login_manager.init_app(app)

# Configuração de e-mail
app.config.update(
    MAIL_SERVER='smtp.gmail.com',
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME='seuemail@gmail.com',
    MAIL_PASSWORD='suasenha'
)
mail = Mail(app)

# Usuário fictício
class User(UserMixin):
    def __init__(self, id):
        self.id = id

@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

# Rota de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == 'admin' and request.form['password'] == '123':
            user = User(1)
            login_user(user)
            return redirect(url_for('form'))
    return render_template('login.html')

# Rota de logout
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Rota do formulário
@app.route('/')
@login_required
def form():
    return render_template('form.html')

# Rota de envio
@app.route('/submit', methods=['POST'])
@login_required
def submit():
    data = request.form.to_dict()
    foto = request.files.get('foto')
    foto_path = None

    if foto:
        filename = secure_filename(foto.filename)
        foto_path = os.path.join('static/uploads', filename)
        foto.save(foto_path)
        data['foto_path'] = foto_path

    pdf_path = generate_pdf(data)

    # Envio por e-mail
    msg = Message("Relatório Técnico", sender=app.config['MAIL_USERNAME'], recipients=[request.form['email']])
    msg.body = "Segue em anexo o relatório técnico."
    with app.open_resource(pdf_path) as fp:
        msg.attach(pdf_path, "application/pdf", fp.read())
    mail.send(msg)

    return send_file(pdf_path, as_attachment=True)

# Rota de histórico (simples)
@app.route('/dashboard')
@login_required
def dashboard():
    arquivos = os.listdir('.')
    relatorios = [f for f in arquivos if f.endswith('.pdf')]
    return render_template('dashboard.html', relatorios=relatorios)
    from fpdf import FPDF
import datetime

def generate_pdf(data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Relatório Técnico", ln=True, align='C')
    pdf.cell(200, 10, txt=f"Data: {datetime.datetime.now().strftime('%d/%m/%Y')}", ln=True, align='C')
    pdf.ln(10)

    campos = {
        "cliente": "Cliente",
        "local": "Local da inspeção",
        "email": "E-mail",
        "latitude": "Latitude",
        "longitude": "Longitude",
        "quadros": "Quadros Elétricos",
        "bombas": "Bombas Grundfos",
        "geradores": "Geradores",
        "analise": "Análise Predial",
        "extintores": "Extintores"
    }

    for campo, titulo in campos.items():
        valor = data.get(campo, "Não informado")
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt=titulo, ln=True)
        pdf.set_font("Arial", '', 12)
        pdf.multi_cell(0, 10, txt=valor)
        pdf.ln(5)

    if 'foto_path' in data:
        pdf.image(data['foto_path'], x=10, y=pdf.get_y(), w=100)

    filename = f"{data.get('cliente', 'relatorio').replace(' ', '_')}_relatorio.pdf"
    pdf.output(filename)
    return filename
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Checklist Técnico</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="manifest" href="/static/manifest.json">
    <link rel="stylesheet" href="/static/style.css">
    <script>
        // Geolocalização
        window.onload = function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    document.getElementById("latitude").value = position.coords.latitude;
                    document.getElementById("longitude").value = position.coords.longitude;
                });
            }
        };

        // Service Worker para PWA
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/static/service-worker.js')
                .then(() => console.log('Service Worker registrado'));
        }
    </script>
</head>
<body>
    <h1>Checklist Técnico</h1>
    <form action="/submit" method="POST" enctype="multipart/form-data">
        <h2>Dados do Cliente</h2>
        <input name="cliente" placeholder="Nome do cliente" required>
        <input name="local" placeholder="Local da inspeção" required>
        <input name="email" type="email" placeholder="E-mail para envio do relatório" required>

        <input type="hidden" name="latitude" id="latitude">
        <input type="hidden" name="longitude" id="longitude">

        <h2>Quadros Elétricos</h2>
        <textarea name="quadros" placeholder="Observações..."></textarea>

        <h2>Bombas Grundfos</h2>
        <textarea name="bombas" placeholder="Funcionamento, ruídos, etc."></textarea>

        <h2>Geradores</h2>
        <textarea name="geradores" placeholder="Nível de óleo, partida, etc."></textarea>

        <h2>Análise Predial</h2>
        <textarea name="analise" placeholder="Infiltrações, estrutura, etc."></textarea>

        <h2>Extintores</h2>
        <textarea name="extintores" placeholder="Validade, sinalização, etc."></textarea>

        <h2>Foto da inspeção</h2>
        <input type="file" name="foto" accept="image/*">

        <button type="submit">Gerar Relatório</button>
    </form>
</body>
</html>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Histórico de Relatórios</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h1>Histórico de Relatórios</h1>
    <a href="/">← Voltar para o checklist</a>
    <ul>
        {% for relatorio in relatorios %}
            <li>
                <a href="/{{ relatorio }}" download>{{ relatorio }}</a>
            </li>
        {% else %}
            <p>Nenhum relatório encontrado.</p>
        {% endfor %}
    </ul>
</body>
</html>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Login Técnico</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <h1>Login do Sistema</h1>
    <form method="POST" action="/login">
        <input type="text" name="username" placeholder="Usuário" required>
        <input type="password" name="password" placeholder="Senha" required>
        <button type="submit">Entrar</button>
    </form>
</body>
</html>
import os
port = int(os.environ.get("PORT", 5000))
app.run(host='0.0.0.0', port=port)